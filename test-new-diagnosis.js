const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
);

async function testNewDiagnosis() {
    console.log('üîç Êñ∞Ë¶èË®∫Êñ≠„ÅÆ„ÉÜ„Çπ„Éà\n');
    
    const testUserId = 'test_user_' + Date.now();
    const testDate = '1990-01-15';
    
    // 1. 1ÂõûÁõÆ„ÅÆË®∫Êñ≠„Çí‰ΩúÊàê
    console.log('1Ô∏è‚É£ 1ÂõûÁõÆ„ÅÆË®∫Êñ≠„Çí‰ΩúÊàê...');
    const diagnosis1Response = await fetch('https://line-love-edu.vercel.app/api/profile-form-v2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            action: 'save-diagnosis',
            userId: testUserId,
            userName: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',
            birthDate: testDate,
            diagnosisType: 'otsukisama',
            resultData: {
                moon_pattern_id: 1,
                moon_phase: 'Êñ∞Êúà',
                test: 'first_diagnosis'
            }
        })
    });
    
    const diagnosis1 = await diagnosis1Response.json();
    console.log('  Ë®∫Êñ≠ID:', diagnosis1.diagnosisId);
    console.log('  Êñ∞Ë¶è„Éï„É©„Ç∞:', diagnosis1.isNew);
    
    // 2. Âêå„Åò„É¶„Éº„Ç∂„Éº„ÉªÁîüÂπ¥ÊúàÊó•„Åß2ÂõûÁõÆ„ÅÆË®∫Êñ≠
    console.log('\n2Ô∏è‚É£ Âêå„Åò„É¶„Éº„Ç∂„Éº„Åß2ÂõûÁõÆ„ÅÆË®∫Êñ≠„Çí‰ΩúÊàê...');
    await new Promise(resolve => setTimeout(resolve, 1000)); // 1ÁßíÂæÖÊ©ü
    
    const diagnosis2Response = await fetch('https://line-love-edu.vercel.app/api/profile-form-v2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            action: 'save-diagnosis',
            userId: testUserId,
            userName: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',
            birthDate: testDate,
            diagnosisType: 'otsukisama',
            resultData: {
                moon_pattern_id: 2,
                moon_phase: 'Ê∫ÄÊúà',
                test: 'second_diagnosis'
            }
        })
    });
    
    const diagnosis2 = await diagnosis2Response.json();
    
    if (!diagnosis2Response.ok) {
        console.log('  ‚ùå „Ç®„É©„Éº:', diagnosis2.error);
        console.log('  Ë©≥Á¥∞:', diagnosis2.details);
    } else {
        console.log('  Ë®∫Êñ≠ID:', diagnosis2.diagnosisId);
        console.log('  Êñ∞Ë¶è„Éï„É©„Ç∞:', diagnosis2.isNew);
    }
    
    // 3. ID„ÅåÁï∞„Å™„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    console.log('\n‚úÖ Ê§úË®ºÁµêÊûú:');
    console.log('  1ÂõûÁõÆ„ÅÆID:', diagnosis1.diagnosisId);
    console.log('  2ÂõûÁõÆ„ÅÆID:', diagnosis2.diagnosisId);
    console.log('  ID„ÅåÁï∞„Å™„Çã:', diagnosis1.diagnosisId !== diagnosis2.diagnosisId ? '‚úÖ YES' : '‚ùå NO');
    
    // 4. „Éá„Éº„Çø„Éô„Éº„Çπ„Åß‰∏°Êñπ„ÅÆ„É¨„Ç≥„Éº„Éâ„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
    console.log('\nüìä „Éá„Éº„Çø„Éô„Éº„ÇπÁ¢∫Ë™ç...');
    const { data: records, error } = await supabase
        .from('diagnoses')
        .select('id, user_id, birth_date, result_data, created_at')
        .eq('user_id', testUserId)
        .order('created_at', { ascending: false });
    
    if (error) {
        console.error('  „Ç®„É©„Éº:', error);
    } else {
        console.log('  „É¨„Ç≥„Éº„ÉâÊï∞:', records.length);
        records.forEach((record, index) => {
            console.log(`\n  „É¨„Ç≥„Éº„Éâ${index + 1}:`);
            console.log('    ID:', record.id);
            console.log('    ‰ΩúÊàêÊó•ÊôÇ:', record.created_at);
            console.log('    „ÉÜ„Çπ„Éà„Éá„Éº„Çø:', record.result_data.test);
        });
    }
    
    // 5. access_rights„ÉÜ„Éº„Éñ„É´„ÇÇÁ¢∫Ë™ç
    console.log('\nüîë „Ç¢„ÇØ„Çª„ÇπÊ®©ÈôêÁ¢∫Ë™ç...');
    const { data: accessRights } = await supabase
        .from('access_rights')
        .select('resource_id, access_level, created_at')
        .eq('user_id', testUserId)
        .eq('resource_type', 'diagnosis');
    
    if (accessRights) {
        console.log('  „Ç¢„ÇØ„Çª„ÇπÊ®©ÈôêÊï∞:', accessRights.length);
        accessRights.forEach((right, index) => {
            console.log(`\n  Ê®©Èôê${index + 1}:`);
            console.log('    Ë®∫Êñ≠ID:', right.resource_id);
            console.log('    „Ç¢„ÇØ„Çª„Çπ„É¨„Éô„É´:', right.access_level);
        });
    }
}

testNewDiagnosis().catch(console.error);